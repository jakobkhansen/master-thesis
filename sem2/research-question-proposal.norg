* Motivation
  - Modern clone detection tools are as far as I've seen not very suitable for use while
    programming, but rather for analysis after being written.
  - Some tools offer plugins, but these are mostly for Eclipse, bloated, old and IDE
    dependant. None seem to have any degree of "plug-and-play"
  - Also, most tools do not support "real-time" clone detection and functionality to merge
    them.

* Proposal
  I want to develop a tool which provides real-time clone detection and functionality to
  merge the detected clones in a modern IDE. This could be suitable to implement as an LSP
  server, making it an IDE agnostic tool.
 ** Relevant research and challenges
    - Real-time clone detection (while developers are typing)
    - Incremental code clone detection?
    - Real-time merging of code clones.
    - Efficient detection of new code clones in a changing codebase
    - Providing clone detection as an LSP server

 ** Tools which can help me
    - SimLib: a clone detection engine ({https://github.com/suddin/ca.usask.cs.srlab.simLib})
    - lsp4j: A Java library for creating LSP servers ({https://github.com/eclipse/lsp4j})

 ** Suggestions for thesis title
    - "Towards modern support for clone detection in IDE's"
    - "Real-time detection and merging of code clones in an IDE environment"

 ** Research question
    - How could real-time detection of code clones affect code quality compared to
      later analysis?
    - How should real-time code clone detection be implemented when focusing on efficiency and
      scalability?
    - How should real-time code clone merging be implemented when focusing on efficiency and
      scalability?
    - How should code clone detection be offered to IDE users? (LSP, plugins, ...)

* Interesting stuff
  - Search within a given scope first like class, package, ...

* Sources
  - {img/2022-02-13-14-49-22.png}
  - {img/2022-02-13-14-51-17.png}

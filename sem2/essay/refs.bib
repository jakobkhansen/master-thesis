@book{fowlerrefactoring,
  author    = {Martin Fowler},
  title     = {Refactoring - Improving the Design of Existing Code},
  series    = {Addison Wesley object technology series},
  publisher = {Addison-Wesley},
  year      = {1999},
  url       = {http://martinfowler.com/books/refactoring.html},
  isbn      = {978-0-201-48567-7},
  timestamp = {Wed, 25 Mar 2015 11:31:06 +0100},
  biburl    = {https://dblp.org/rec/books/daglib/0019908.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@Inbook{Inoue_introduction_to_cc,
    author="Inoue, Katsuro",
    editor="Inoue, Katsuro
    and Roy, Chanchal K.",
    title="Introduction to Code Clone Analysis",
    bookTitle="Code Clone Analysis: Research, Tools, and Practices",
    year="2021",
    publisher="Springer Singapore",
    address="Singapore",
    pages="3--27",
    abstract="Code Clone is a code snippet that has the same or similar code snippet in the same or different software system. The existence of code clones is an issue on software maintenance and a clue to understanding the structure and evolution of software systems. A large number of researches on code clones have been performed, and many tools for code clone analysis have been developed. In this chapter, we will explain some of the terms that are important for understanding code clones, such as definition, type, analysis granularity, and analysis domain. We will also outline the approaches and applications of code clone analysis.",
    isbn="978-981-16-1927-4",
    doi="10.1007/978-981-16-1927-4_1",
    url="https://doi.org/10.1007/978-981-16-1927-4_1"
}


@inproceedings{Rohit_Gheyi_Impact,
  author    = {Diego Cedrim and
               Alessandro Garcia and
               Melina Mongiovi and
               Rohit Gheyi and
               Leonardo da Silva Sousa and
               Rafael Maiani de Mello and
               Baldoino Fonseca and
               M{\'{a}}rcio Ribeiro and
               Alexander Ch{\'{a}}vez},
  editor    = {Eric Bodden and
               Wilhelm Sch{\"{a}}fer and
               Arie van Deursen and
               Andrea Zisman},
  title     = {Understanding the impact of refactoring on smells: a longitudinal
               study of 23 software projects},
  booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software
               Engineering, {ESEC/FSE} 2017, Paderborn, Germany, September 4-8, 2017},
  pages     = {465--475},
  publisher = {{ACM}},
  year      = {2017},
  url       = {https://doi.org/10.1145/3106237.3106259},
  doi       = {10.1145/3106237.3106259},
  timestamp = {Tue, 01 Feb 2022 10:45:16 +0100},
  biburl    = {https://dblp.org/rec/conf/sigsoft/CedrimGMGSMFRC17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Zibran_real_time_search,
    author = {Zibran, Minhaz F. and Roy, Chanchal K.},
    title = {IDE-Based Real-Time Focused Search for near-Miss Clones},
    year = {2012},
    isbn = {9781450308571},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2245276.2231970},
    doi = {10.1145/2245276.2231970},
    abstract = {Code clone is a well-known code smell that needs to be detected and managed during the software development process. However, the existing clone detectors have one or more of the three shortcomings: (a) limitation in detecting Type-3 clones, (b) they come as stand-alone tools separate from IDE and thus cannot support clone-aware development, (c) they overwhelm the developer with all clones from the entire code-base, instead of a focused search for clones of a selected code segment of the developer's interest.This paper presents our IDE-integrated clone search tool, that addresses all the above issues. For clone detection, we adapt a suffix-tree-based hybrid algorithm. Through an asymptotic analysis, we show that our approach for clone detection is both time and memory efficient. Moreover, using three separate empirical studies, we demonstrate that our tool is flexibly usable for searching exact (Type-1) and near-miss (Type-2 and Type-3) clones with high precision and recall.},
    booktitle = {Proceedings of the 27th Annual ACM Symposium on Applied Computing},
    pages = {1235–1242},
    numpages = {8},
    keywords = {clone detection, clone search, maintenance, reengineering},
    location = {Trento, Italy},
    series = {SAC '12}
}

@inproceedings{Udding_Towards_Convenient_Management,
author = {Uddin, Md Sharif and Roy, Chanchal K. and Schneider, Kevin A.},
title = {Towards Convenient Management of Software Clone Codes in Practice: An Integrated Approach},
year = {2015},
publisher = {IBM Corp.},
address = {USA},
abstract = {Software code cloning is inevitable during software development and unmanaged cloning practice can create substantial problems for software maintenance and evolution. Current research in the area software clones includes, but is not limited to: finding ways to manage clones; gaining more control over clone generation; and, studying clone evolution and its effects on the evolution of software. In this study, we investigate tools and techniques for detecting, managing, and understanding the evolution of clones, as well as design a convenient tool to make those techniques available to a developer's software development environment. Towards the goal of promoting the practical use of code clone research and to provide better support for managing clones in software systems, we first developed SimEclipse: a clone-aware software development platform, and then, using the tool, we performed a study to investigate the usefulness of using a number clone based technologies in an integrated platform rather than using those discretely. Finally, a small scale user study is performed to evaluate SimEclipse's effectiveness, usability and information management with respect to some pre-defined clone management activities. We believe that both researchers and developers would enjoy and utilize the benefits of using SimEclipse for different aspects of code clone research as well as for managing cloned code in software systems.},
booktitle = {Proceedings of the 25th Annual International Conference on Computer Science and Software Engineering},
pages = {211–220},
numpages = {10},
keywords = {IDE plugin, software clone, integrated clone management},
location = {Markham, Canada},
series = {CASCON '15}
}

@INPROCEEDINGS{InsightsSystemWideDuplication, 
    author={Rieger, M. and Ducasse, S. and Lanza, M.}, 
    booktitle={11th
    Working Conference on Reverse Engineering},
    title={Insights into system-wide code
    duplication},
    year={2004},
    volume={},
    number={},
    pages={100-109},
    doi={10.1109/WCRE.2004.25}} 

@inproceedings{SHINOBI,
    author = {Kawaguchi, Shinji and Yamashina, Takanobu and Uwano, Hidetake and Fushida, Kyohei and Kamei, Yasutaka and Nagura, Masataka and Iida, Hajimu},
    year = {2009},
    month = {01},
    pages = {313-314},
    title = {SHINOBI: A tool for automatic code clone detection in the IDE},
    doi = {10.1109/WCRE.2009.36}
}

@article{ComparisonAndEvaluationOfTechniques,
  author    = {Chanchal Kumar Roy and
               James R. Cordy and
               Rainer Koschke},
  title     = {Comparison and evaluation of code clone detection techniques and tools:
               {A} qualitative approach},
  journal   = {Sci. Comput. Program.},
  volume    = {74},
  number    = {7},
  pages     = {470--495},
  year      = {2009},
  url       = {https://doi.org/10.1016/j.scico.2009.02.007},
  doi       = {10.1016/j.scico.2009.02.007},
  timestamp = {Wed, 17 Feb 2021 21:56:05 +0100},
  biburl    = {https://dblp.org/rec/journals/scp/RoyCK09.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{BakerSparseDynamicProgramming,
    title = {Sparse Dynamic Programming for Longest Common Subsequence from Fragments},
    journal = {Journal of Algorithms},
    volume = {42},
    number = {2},
    pages = {231-254},
    year = {2002},
    issn = {0196-6774},
    doi = {https://doi.org/10.1006/jagm.2002.1214},
    url = {https://www.sciencedirect.com/science/article/pii/S0196677402912149},
    author = {Brenda S. Baker and Raffaele Giancarlo},
    abstract = {Sparse Dynamic Programming has emerged as an essential tool for the design of efficient algorithms for optimization problems coming from such diverse areas as computer science, computational biology, and speech recognition. We provide a new sparse dynamic programming technique that extends the Hunt–Szymanski paradigm for the computation of the longest common subsequence (LCS) and apply it to solve the LCS from Fragments problem: given a pair of strings X and Y (of length n and m, respectively) and a set M of matching substrings of X and Y, find the longest common subsequence based only on the symbol correspondences induced by the substrings. This problem arises in an application to analysis of software systems. Our algorithm solves the problem in O(|M|log|M|) time using balanced trees, or O(|M|loglogmin(|M|,nm/|M|)) time using Johnson's version of Flat Trees. These bounds apply for two cost measures. The algorithm can also be adapted to finding the usual LCS in O((m+n)log|Σ|+|M|log|M|) time using balanced trees or O((m+n)log|Σ|+|M|loglogmin(|M|,nm/|M|)) time using Johnson's version of Flat Trees, where M is the set of maximal matches between substrings of X and Y and Σ is the alphabet. These bounds improve on those of the original Hunt–Szymanski algorithm while retaining the overall approach.}
}

@book{crosby1980quality,
  title={Quality is Free: The Art of Making Quality Certain},
  author={Crosby, P.B.},
  isbn={9780451624680},
  lccn={79089296},
  url={https://books.google.no/books?id=3TMQt73LDooC},
  year={1980},
  publisher={New American Library}
}

@book{MetricsAndModelsInSoftwareQuality,
    author = {Kan, Stephen H.},
    title = {Metrics and Models in Software Quality Engineering},
    year = {2002},
    isbn = {0201729156},
    publisher = {Addison-Wesley Longman Publishing Co., Inc.},
    address = {USA},
    edition = {2nd},
}
@INPROCEEDINGS{CloningByAccident,

  author={Al-Ekram, R. and Kapser, C. and Holt, R. and Godfrey, M.},

  booktitle={2005 International Symposium on Empirical Software Engineering, 2005.}, 

  title={Cloning by accident: an empirical study of source code cloning across software systems}, 

  year={2005},

  volume={},

  number={},

  pages={10 pp.-},

  doi={10.1109/ISESE.2005.1541846}}


